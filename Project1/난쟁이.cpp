////문제
////왕비를 피해 일곱 난쟁이들과 함께 평화롭게 생활하고 있던 백설공주에게 위기가 찾아왔다.일과를 마치고 돌아온 난쟁이가 일곱 명이 아닌 아홉 명이었던 것이다.
////
////아홉 명의 난쟁이는 모두 자신이 "백설 공주와 일곱 난쟁이"의 주인공이라고 주장했다.뛰어난 수학적 직관력을 가지고 있던 백설공주는, 다행스럽게도 일곱 난쟁이의 키의 합이 100이 됨을 기억해 냈다.
////
////아홉 난쟁이의 키가 주어졌을 때, 백설공주를 도와 일곱 난쟁이를 찾는 프로그램을 작성하시오.
////
////입력
////아홉 개의 줄에 걸쳐 난쟁이들의 키가 주어진다.주어지는 키는 100을 넘지 않는 자연수이며, 아홉 난쟁이의 키는 모두 다르며, 가능한 정답이 여러 가지인 경우에는 아무거나 출력한다.
////
////출력
////일곱 난쟁이의 키를 오름차순으로 출력한다.일곱 난쟁이를 찾을 수 없는 경우는 없다.
//
//#include<iostream>
//#include<vector>
//#include<algorithm>
//#include<numeric>
//
//using namespace std;
//int a[9];
//int Asum;
//pair<int, int> ret;
////
////int main()
////{
////	for (int i = 0; i < 9; i++) {
////		cin >> a[i];
////	}
////	vector<int>v;
////
////	for (int i = 0; i < 9; ++i)
////	{
////		v.push_back((a[i]));
////	}
////	sort(v.begin(), v.end());
////
////	int sum = accumulate(v.begin(), v.end(), 0);
////
////	for (int i = 0; i < 9; ++i)
////	{
////		for (int j = i + 1; j < 9; ++j)
////		{
////			if (v[i] + v[j] == sum - 100)
////			{
////				v.erase(v.begin() + j, v.begin() + j + 1);
////				v.erase(v.begin() + i, v.begin() + i + 1);
////				break;
////
////			}
////		}
////		if (v.size() != 9)
////		{
////			break;
////		}
////	}
////
////	for (int a : v)
////	{
////		cout << a << " ";
////	}
////
////	
////
////}
////int main()
////{
////	ios_base::sync_with_stdio(false);
////	cin.tie(NULL);
////	cout.tie(NULL);
////	for (int i = 0; i < 9; ++i)
////	{
////		cin >> a[i];
////	}
////
////	sort(a, a + 9);
////
////	do 
////	{
////		int sum = 0;
////		for (int i = 0; i < 7; ++i)
////		{
////			sum += a[i];
////		}
////
////		if (sum == 100)
////		{
////			break;
////		}
////	} while (next_permutation(a, a + 9));
////
////	for (int i = 0; i < 7; ++i)
////	{
////		cout << a[i] << "\n";
////	}
////	return 0;
////
////}
//void Solve()
//{
//	for (int i = 0; i < 9; ++i)
//	{
//		for (int j = i + 1; j < 9; ++j)
//		{
//			if (Asum - 100 == a[i] + a[j])
//			{
//				ret = { i, j };
//				return; 
//			}
//		}
//	}
//}
//int main()
//{
//	for (int i = 0; i < 9; ++i)
//	{
//		cin >> a[i];
//	}
//	vector<int> v;
//	for (int i : a)
//	{
//		Asum += i;
//	}
//
//	Solve();
//	for (int i = 0; i < 9; ++i)
//	{
//		if (i == ret.first || i == ret.second)
//		{
//			continue;
//		}
//		v.push_back(a[i]);
//	}
//	sort(v.begin(), v.end());
//	for (int i : v)
//	{
//		cout << i << " ";
//	}
//	cout << "\n";
//	return 0;
//
//}
//#include <iostream>
//#include <vector>
//#include <algorithm>
//
//using namespace std;
//
//int a[3] = { 1,2,3 };
//
//vector<int> v;
//
//void printV(vector<int>& v)
//{
//	for (int i = 0; i < v.size(); ++i)
//	{
//		cout << v[i] << " ";
//	}
//
//	cout << "\n";
//}
//
//void makePermutaiton(int n, int r, int depth)
//{
//	cout << n << " : " << r << " : " << depth << "\n";
//	if (r == depth)
//	{
//		printV(v);
//		return;
//	}
//	for (int i = depth; i < n; ++i)
//	{
//		swap(v[i], v[depth]);
//		makePermutaiton(n, r, depth + 1);
//		swap(v[i], v[depth]);
//	}
//	return;
//}
//int main()
//{
//	for (int i = 0; i < 3; ++i)
//		v.push_back(a[i]);
//	makePermutaiton(3, 3, 0);
//	return 0;
//}
#include<iostream>
#include <algorithm>
#include<vector>
using namespace std;

int A;

vector<int>V;

int main()
{
	for (int i = 0; i < 9; ++i)
	{
		cin >> A;
		V.push_back(A);
	}

	sort(V.begin(), V.end());

	do
	{
		int Sum = 0;
		for (int i = 0; i < 7; ++i)
		{
			Sum += V[i];
		}
		if (Sum == 100)
		{
			for (int i = 0; i < 7; ++i)
			{
				cout << V[i];
				cout << "\n";
				
			}
			return 0;
		}
	} while (next_permutation(V.begin(), V.end()));
}